if(as_kable_1L_lgl){
releases_xx <- releases_xx %>%
kableExtra::kbl() %>%
kableExtra::kable_styling()
}
return(releases_xx)
}
#releases_tb <- tidyRSS::tidyfeed("https://github.com/ready4-dev/ready4/releases.atom")
make_release_ds(repository_type_1L_chr = "Module")
make_release_ds <- function(repository_type_1L_chr = "Framework",
as_kable_1L_lgl = T,
brochure_repos_chr = character(0),
exclude_chr = character(0),
framework_repos_chr = character(0),
model_repos_chr = character(0),
program_repos_chr = character(0),
organisation_1L_chr = "ready4-dev",
repositories_chr = character(0)){
if(identical(brochure_repos_chr,character(0))){
brochure_repos_chr <- "ready4web"
}
if(identical(exclude_chr,character(0))){
exclude_chr <- "rebuild"
}
if(identical(framework_repos_chr,character(0))){
framework_repos_chr <- c("ready4","ready4fun","ready4class","ready4pack","ready4use","ready4show")
}
if(identical(model_repos_chr,character(0))){
model_repos_chr <- c("youthvars","scorz","specific","TTU","youthu","mychoice","heterodox", "bimp")
}
if(identical(program_repos_chr,character(0))){
program_repos_chr <- setdiff(natmanager::list_repo(organisation_1L_chr),
c(brochure_repos_chr, exclude_chr, framework_repos_chr, model_repos_chr))
}
if(identical(repositories_chr,character(0))){
if(repository_type_1L_chr == "Framework"){
repositories_chr <- framework_repos_chr
}
if(repository_type_1L_chr == "Module"){
repositories_chr <- model_repos_chr
}
if(repository_type_1L_chr == "Program"){
repositories_chr <- program_repos_chr
}else{
repository_type_1L_chr <- "Package"
}
}
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
if(as_kable_1L_lgl){
releases_xx <- releases_xx %>%
kableExtra::kbl() %>%
kableExtra::kable_styling()
}
return(releases_xx)
}
make_release_ds("Program")
ready4::get_datasets_tb() -> ds_tb
ds_tb
ds_tb$Contents
ds_tb$Datasets_Meta
ds_tb$Datasets_Meta
ds_tb$Datasets_Meta %>% length()
ds_tb$Datasets_Meta[[1]]
ds_tb$Datasets_Meta[[1]][[1]]
ds_tb$Datasets_Meta[[1]]
ds_tb$Datasets_Meta[[1]][[1]]$fields$value
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_stop()
hugodown::hugo_start()
unlink("content/en/blog/releases/Framework_MDK_cache", recursive = TRUE)
.rs.restartR()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_start()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_start()
hugodown::hugo_start()
rlang::last_error()
rlang::last_trace()
hugodown::hugo_version()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_start()
ds_tb <- make_release_ds("Framework",
as_kable_1L_lgl = F)
make_release_ds <- function(repository_type_1L_chr = "Framework",
as_kable_1L_lgl = T,
brochure_repos_chr = character(0),
exclude_chr = character(0),
framework_repos_chr = character(0),
model_repos_chr = character(0),
program_repos_chr = character(0),
organisation_1L_chr = "ready4-dev",
repositories_chr = character(0)){
if(identical(brochure_repos_chr,character(0))){
brochure_repos_chr <- "ready4web"
}
if(identical(exclude_chr,character(0))){
exclude_chr <- "rebuild"
}
if(identical(framework_repos_chr,character(0))){
framework_repos_chr <- c("ready4","ready4fun","ready4class","ready4pack","ready4use","ready4show")
}
if(identical(model_repos_chr,character(0))){
model_repos_chr <- c("youthvars","scorz","specific","TTU","youthu","mychoice","heterodox", "bimp")
}
if(identical(program_repos_chr,character(0))){
program_repos_chr <- setdiff(natmanager::list_repo(organisation_1L_chr),
c(brochure_repos_chr, exclude_chr, framework_repos_chr, model_repos_chr))
}
if(identical(repositories_chr,character(0))){
if(repository_type_1L_chr == "Framework"){
repositories_chr <- framework_repos_chr
}
if(repository_type_1L_chr == "Module"){
repositories_chr <- model_repos_chr
}
if(repository_type_1L_chr == "Program"){
repositories_chr <- program_repos_chr
}else{
repository_type_1L_chr <- "Package"
}
}
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
if(as_kable_1L_lgl){
releases_xx <- releases_xx %>%
kableExtra::kbl() %>%
kableExtra::kable_styling()
}
return(releases_xx)
}
ds_tb <- make_release_ds("Framework",
as_kable_1L_lgl = F)
library(magrittr)
ds_tb <- make_release_ds("Framework",
as_kable_1L_lgl = F)
ds_tb
ds_tb %>% dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "))
ds_tb$Date
ds_tb$Date %>% format.Date()
?format.Date
ds_tb$Date %>% format.Date("%d-%b-%Y")
ds_tb %>% dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
Date = Date %>% format.Date("%d-%b-%Y"))
ds_tb %>% dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
Date = Date %>% format.Date("%d-%b-%Y") %>% as.character())
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
?knitr::kable
# ds_tb <- make_release_ds("Framework",
#                 as_kable_1L_lgl = F)
# ds_tb %>% dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
#                         Date = Date %>% format.Date("%d-%b-%Y") %>% as.character()) %>%
#   dplyr::select(Date, dplyr::everything()) %>%
data.frame(a=1:5,b="AAAAA")
knitr::kable("html")
# kableExtra::kbl(format = "html")
# ds_tb <- make_release_ds("Framework",
#                 as_kable_1L_lgl = F)
# ds_tb %>% dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
#                         Date = Date %>% format.Date("%d-%b-%Y") %>% as.character()) %>%
#   dplyr::select(Date, dplyr::everything()) %>%
data.frame(a=1:5,b="AAAAA")
knitr::kable("html",, table.attr = "class=\"striped\"")
# kableExtra::kbl(format = "html")
# ds_tb <- make_release_ds("Framework",
#                 as_kable_1L_lgl = F)
# ds_tb %>% dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
#                         Date = Date %>% format.Date("%d-%b-%Y") %>% as.character()) %>%
#   dplyr::select(Date, dplyr::everything()) %>%
data.frame(a=1:5,b="AAAAA")
knitr::kable("html", table.attr = "class=\"striped\"")
# kableExtra::kbl(format = "html")
# ds_tb <- make_release_ds("Framework",
#                 as_kable_1L_lgl = F)
# ds_tb %>% dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
#                         Date = Date %>% format.Date("%d-%b-%Y") %>% as.character()) %>%
#   dplyr::select(Date, dplyr::everything()) %>%
mtcars[1:2, 1:2] %>%
knitr::kable("html", table.attr = "class=\"striped\"")
# kableExtra::kbl(format = "html")
ds_tb <- make_release_ds("Framework",
as_kable_1L_lgl = F)
ds_tb %>% dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
Date = Date %>% format.Date("%d-%b-%Y") %>% as.character()) %>%
dplyr::select(Date, dplyr::everything()) %>%
#mtcars[1:2, 1:2] %>%
knitr::kable("html")
# kableExtra::kbl(format = "html")
# ds_tb <- make_release_ds("Framework",
#                 as_kable_1L_lgl = F)
# ds_tb %>% dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
#                         Date = Date %>% format.Date("%d-%b-%Y") %>% as.character()) %>%
#   dplyr::select(Date, dplyr::everything()) %>%
mtcars[1:2, 1:2] %>%
knitr::kable("html") %>%
kableExtra::kable_paper()
# kableExtra::kbl(format = "html")
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
ready4::print_data
ready4::print_dvs
hugodown::hugo_stop()
hugodown::hugo_start()
hugodown::hugo_stop()
hugodown::hugo_start()
Sys.Date()
hugodown::hugo_stop()
hugodown::hugo_start()
library(ready4)
y <- get_datasets_tb()
y
y$Datasets_Meta
y$Datasets_Meta[[1]]
y$Datasets_Meta[[1]] %>% class()
ready4::get_datasets_tb()
ready4::get_datasets_tb
hugodown::hugo_stop()
hugodown::hugo_start()
Sys.Date(),'%B %d, %Y')
format.Date(Sys.Date(),'%B %d, %Y')
Sys.Date()
hugodown::hugo_stop()
hugodown::hugo_start()
dataset_metadata("10.7910/DVN/VGPIPS", server = "dataverse.harvard.edu")->meta_ls
dataverse::dataset_metadata("10.7910/DVN/VGPIPS", server = "dataverse.harvard.edu")->meta_ls
meta_ls$fields
dataverse::dataset_versions("10.7910/DVN/VGPIPS", server = "dataverse.harvard.edu")
dataverse::dataset_versions("10.7910/DVN/VGPIPS", server = "dataverse.harvard.edu") -> meta_ls
meta_ls %>% length()
meta_ls[[1]]$versionNumber
meta_ls[[1]]$releaseTime
meta_ls[[1]]$versionMinorNumber
meta_ls[[1]]$id
meta_ls[[1]]$termsOfUse
meta_ls[[1]]$fileAccessRequest
meta_ls[[1]]$datasetId
meta_ls[[1]]$datasetPersistentId
meta_ls[[1]]$files
length(meta_ls[[1]]$files)
meta_ls[[1]]$versionState
meta_ls[[1]]$storageIdentifier
meta_ls[[1]]$metadataBlocks
make_ds_releases <- function(ds_dois_chr,
format_1L_chr = "%d-%b-%Y",
server_1L_chr = "dataverse.harvard.edu"){
ds_dois_chr %>%
purrr::map_dfr(~{
meta_ls <- dataverse::dataset_versions(.x, server = server_1L_chr)
doi_1L_chr <- .x
1:length(meta_ls) %>%
purrr::map_dfr(tibble::tibble(Date = meta_ls[[.x]]$releaseTime,
DOI = doi_1L_chr,
Version = paste0(meta_ls[[.x]]$versionNumber,".",meta_ls[[.x]]$versionMinorNumber),
`Number of files` = length(meta_ls[[1]]$files)))
}) %>%
dplyr::arrange(dplyr::desc(Date)) %>%
dplyr::mutate(Date = Date %>% format.Date(format_1L_chr) %>% as.character())
}
make_ds_releases <- function(ds_dois_chr,
format_1L_chr = "%d-%b-%Y",
server_1L_chr = "dataverse.harvard.edu"){
ds_dois_chr %>%
purrr::map_dfr(~{
meta_ls <- dataverse::dataset_versions(.x, server = server_1L_chr)
doi_1L_chr <- .x
1:length(meta_ls) %>%
purrr::map_dfr(tibble::tibble(Date = meta_ls[[.x]]$releaseTime,
DOI = paste0("https://doi.org/",doi_1L_chr),
Version = paste0(meta_ls[[.x]]$versionNumber,".",meta_ls[[.x]]$versionMinorNumber),
`Number of files` = length(meta_ls[[1]]$files)))
}) %>%
dplyr::arrange(dplyr::desc(Date)) %>%
dplyr::mutate(Date = Date %>% format.Date(format_1L_chr) %>% as.character())
}
ds_tb <- make_ds_releases("10.7910/DVN/RIQTKK")
.x<-"10.7910/DVN/RIQTKK"
meta_ls <- dataverse::dataset_versions(.x, server = server_1L_chr)
format_1L_chr = "%d-%b-%Y"
server_1L_chr = "dataverse.harvard.edu"
meta_ls <- dataverse::dataset_versions(.x, server = server_1L_chr)
doi_1L_chr <- .x
1:length(meta_ls) %>%
purrr::map_dfr(tibble::tibble(Date = meta_ls[[.x]]$releaseTime,
DOI = paste0("https://doi.org/",doi_1L_chr),
Version = paste0(meta_ls[[.x]]$versionNumber,".",meta_ls[[.x]]$versionMinorNumber),
`Number of files` = length(meta_ls[[1]]$files)))
1:length(meta_ls)
make_ds_releases <- function(ds_dois_chr,
format_1L_chr = "%d-%b-%Y",
server_1L_chr = "dataverse.harvard.edu"){
ds_dois_chr %>%
purrr::map_dfr(~{
meta_ls <- dataverse::dataset_versions(.x, server = server_1L_chr)
doi_1L_chr <- .x
1:length(meta_ls) %>%
purrr::map_dfr(~tibble::tibble(Date = meta_ls[[.x]]$releaseTime,
DOI = paste0("https://doi.org/",doi_1L_chr),
Version = paste0(meta_ls[[.x]]$versionNumber,".",meta_ls[[.x]]$versionMinorNumber),
`Number of files` = length(meta_ls[[1]]$files)))
}) %>%
dplyr::arrange(dplyr::desc(Date)) %>%
dplyr::mutate(Date = Date %>% format.Date(format_1L_chr) %>% as.character())
}
ds_tb <- make_ds_releases("10.7910/DVN/RIQTKK")
ds_tb
library(ready4)
library(tidyRSS)
library(zen4R) # https://cran.r-project.org/web/packages/zen4R/vignettes/zen4R.html#package_overview
make_ds_releases <- function(ds_dois_chr,
format_1L_chr = "%d-%b-%Y",
server_1L_chr = "dataverse.harvard.edu"){
ds_dois_chr %>%
purrr::map_dfr(~{
meta_ls <- dataverse::dataset_versions(.x, server = server_1L_chr)
doi_1L_chr <- .x
1:length(meta_ls) %>%
purrr::map_dfr(~tibble::tibble(Date = meta_ls[[.x]]$releaseTime,
DOI = paste0("https://doi.org/",doi_1L_chr),
Version = paste0(meta_ls[[.x]]$versionNumber,".",meta_ls[[.x]]$versionMinorNumber),
`Number of files` = length(meta_ls[[1]]$files)))
}) %>%
dplyr::arrange(dplyr::desc(Date)) %>%
dplyr::mutate(Date = Date %>% format.Date(format_1L_chr) %>% as.character())
}
make_release_ds <- function(repository_type_1L_chr = "Framework",
as_kable_1L_lgl = T,
brochure_repos_chr = character(0),
exclude_chr = character(0),
format_1L_chr = "%d-%b-%Y",
framework_repos_chr = character(0),
model_repos_chr = character(0),
program_repos_chr = character(0),
organisation_1L_chr = "ready4-dev",
repositories_chr = character(0),
...){
if(identical(brochure_repos_chr,character(0))){
brochure_repos_chr <- "ready4web"
}
if(identical(exclude_chr,character(0))){
exclude_chr <- "rebuild"
}
if(identical(framework_repos_chr,character(0))){
framework_repos_chr <- c("ready4","ready4fun","ready4class","ready4pack","ready4use","ready4show")
}
if(identical(model_repos_chr,character(0))){
model_repos_chr <- c("youthvars","scorz","specific","TTU","youthu","mychoice","heterodox", "bimp")
}
if(identical(program_repos_chr,character(0))){
program_repos_chr <- setdiff(natmanager::list_repo(organisation_1L_chr),
c(brochure_repos_chr, exclude_chr, framework_repos_chr, model_repos_chr))
}
if(identical(repositories_chr,character(0))){
if(repository_type_1L_chr == "Framework"){
repositories_chr <- framework_repos_chr
}
if(repository_type_1L_chr == "Module"){
repositories_chr <- model_repos_chr
}
if(repository_type_1L_chr == "Program"){
repositories_chr <- program_repos_chr
}else{
repository_type_1L_chr <- "Package"
}
}
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
if(as_kable_1L_lgl){
releases_xx <- releases_xx  %>%
dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
Date = Date %>% format.Date(format_1L_chr) %>% as.character()) %>%
dplyr::select(Date, dplyr::everything()) %>%
kableExtra::kbl() %>%
kableExtra::kable_styling(...)
}
return(releases_xx)
}
make_release_ds("Program")
make_release_ds("Program",
as_kable_1L_lgl = F) ->ds_tb
ds_tb
ds_tb$Program %>% unique()
hugodown::hugo_start()
rlang::last_error()
rlang::last_trace()
hugodown::hugo_stop()
hugodown::hugo_start()
rlang::last_error()
rlang::last_trace()
hugodown::hugo_start()
hugodown::hugo_start()
blogdown::serve_site()
hugodown::hugo_stop()
hugodown::hugo_start()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
.libPaths()
version
hugodown::hugo_start()
install.packages("blogdown")
blogdown::serve_site()
blogdown::stop_server()
hugodown::hugo::hugo_start()
hugodown::hugo_start()
blogdown::serve_site()
hugodown::hugo_install()
rlang::last_error()''
rlang::last_error()'
hugodown::hugo_install()
rlang::last_error()
rlang::last_trace()
hugodown::hugo_version()
blogdown::serve_site()
blogdown::stop_server()
hugodown::hugo_start()
rlang::last_error()
rlang::last_trace()
hugodown::hugo_start()
hugodown::hugo_start()
hugodown::hugo_start()
rlang::last_error()
rlang::last_trace()
hugodown::hugo_start()
hugodown::hugo_start()
hugodown::hugo_install()
hugodown::hugo_version()
blogdown::install_hugo()
hugodown::hugo_start()
hugodown::hugo_install('0.106.0')
rlang::last_error()
hugodown::hugo_install
hugodown:::hugo_os()
hugodown::hugo_install('0.106.0')
hugodown::hugo_install('0.106.0',"darwin","universal")
hugodown:::hugo_os
vignette("config")
hugodown::site_outdated()
hugodown::hugo_browse()
hugodown::hugo_locate()
version
.libPaths()
hugodown::hugo_start()
hugodown::hugo_install('0.106.0')
hugodown::hugo_start()
rlang::last_error()
hugodown::hugo_locate()
hugodown::hugo_locate()
hugodown::hugo_locate()
hugodown::hugo_install('0.106.0')
install.packages("blogdown")
hugodown::hugo_install('0.106.0')
blogdown::check_hugo()
blogdown::check_netlify()
