hugodown::hugo_locate()
hugodown::hugo_locate()
hugodown::hugo_locate()
hugodown::hugo_install('0.106.0')
install.packages("blogdown")
hugodown::hugo_install('0.106.0')
blogdown::check_hugo()
blogdown::check_netlify()
blogdown::serve_site()
install.packages("tidyRSS")
blogdown::serve_site()
install.packages("xfun")
install.packages("xfun")
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()\
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
ready4::print_packages
bootstrap_options = "striped"
as_kable_1L_lgl = T
as_kable_1L_lgl = T
repository_type_1L_chr = "Framework"
brochure_repos_chr = character(0)
exclude_chr = character(0)
format_1L_chr = "%d-%b-%Y"
framework_repos_chr = character(0)
model_repos_chr = character(0)
program_repos_chr = character(0)
organisation_1L_chr = "ready4-dev"
repositories_chr = character(0)
if(identical(brochure_repos_chr,character(0))){
brochure_repos_chr <- "ready4web"
}
if(identical(exclude_chr,character(0))){
exclude_chr <- "rebuild"
}
if(identical(framework_repos_chr,character(0))){
framework_repos_chr <- c("ready4","ready4fun","ready4class","ready4pack","ready4use","ready4show")
}
if(identical(model_repos_chr,character(0))){
model_repos_chr <- c("youthvars","scorz","specific","TTU","youthu","mychoice","heterodox", "bimp")
}
if(identical(program_repos_chr,character(0))){
program_repos_chr <- setdiff(natmanager::list_repo(organisation_1L_chr),
c(brochure_repos_chr, exclude_chr, framework_repos_chr, model_repos_chr))
}
if(identical(repositories_chr,character(0))){
if(repository_type_1L_chr == "Framework"){
repositories_chr <- framework_repos_chr
}
if(repository_type_1L_chr == "Module"){
repositories_chr <- model_repos_chr
}
if(repository_type_1L_chr == "Program"){
repositories_chr <- program_repos_chr
}else{
repository_type_1L_chr <- "Package"
}
}
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
library(ready4)
if(identical(brochure_repos_chr,character(0))){
brochure_repos_chr <- "ready4web"
}
if(identical(exclude_chr,character(0))){
exclude_chr <- "rebuild"
}
if(identical(framework_repos_chr,character(0))){
framework_repos_chr <- c("ready4","ready4fun","ready4class","ready4pack","ready4use","ready4show")
}
if(identical(model_repos_chr,character(0))){
model_repos_chr <- c("youthvars","scorz","specific","TTU","youthu","mychoice","heterodox", "bimp")
}
if(identical(program_repos_chr,character(0))){
program_repos_chr <- setdiff(natmanager::list_repo(organisation_1L_chr),
c(brochure_repos_chr, exclude_chr, framework_repos_chr, model_repos_chr))
}
if(identical(repositories_chr,character(0))){
if(repository_type_1L_chr == "Framework"){
repositories_chr <- framework_repos_chr
}
if(repository_type_1L_chr == "Module"){
repositories_chr <- model_repos_chr
}
if(repository_type_1L_chr == "Program"){
repositories_chr <- program_repos_chr
}else{
repository_type_1L_chr <- "Package"
}
}
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
releases_tb <- releases_xx
releases_xx <- releases_xx  %>%
dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
Date = Date %>% format.Date(format_1L_chr) %>% as.character()) %>%
dplyr::select(Date, dplyr::everything()) %>%
kableExtra::kbl() %>%
kableExtra::kable_styling()
logos_chr <- purrr::map_chr(releases_xx$Package,
~paste0("https://ready4-dev.github.io/", .x, "/logo.png"))
ready4::print_packages
blogdown::stop_server()
blogdown::serve_site()
pkg_extensions_tb <- make_libraries_tb(include_1L_chr = include_1L_chr)
pkg_extensions_tb <- make_libraries_tb(include_1L_chr = "modules")
pkg_extensions_tb$pt_ns_chr
blogdown::stop_server()
blogdown::serve_site()
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
repository_type_1L_chr = "Framework"
if(identical(brochure_repos_chr,character(0))){
brochure_repos_chr <- "ready4web"
}
if(identical(exclude_chr,character(0))){
exclude_chr <- "rebuild"
}
if(identical(framework_repos_chr,character(0))){
framework_repos_chr <- c("ready4","ready4fun","ready4class","ready4pack","ready4use","ready4show")
}
if(identical(model_repos_chr,character(0))){
model_repos_chr <- c("youthvars","scorz","specific","TTU","youthu","mychoice","heterodox", "bimp")
}
if(identical(program_repos_chr,character(0))){
program_repos_chr <- setdiff(natmanager::list_repo(organisation_1L_chr),
c(brochure_repos_chr, exclude_chr, framework_repos_chr, model_repos_chr))
}
if(identical(repositories_chr,character(0))){
if(repository_type_1L_chr == "Framework"){
repositories_chr <- framework_repos_chr
}
if(repository_type_1L_chr == "Module"){
repositories_chr <- model_repos_chr
}
if(repository_type_1L_chr == "Program"){
repositories_chr <- program_repos_chr
}else{
repository_type_1L_chr <- "Package"
}
}
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
repository_type_1L_chr
repository_type_1L_chr
if(identical(brochure_repos_chr,character(0))){
brochure_repos_chr <- "ready4web"
}
if(identical(exclude_chr,character(0))){
exclude_chr <- "rebuild"
}
if(identical(framework_repos_chr,character(0))){
framework_repos_chr <- c("ready4","ready4fun","ready4class","ready4pack","ready4use","ready4show")
}
if(identical(model_repos_chr,character(0))){
model_repos_chr <- c("youthvars","scorz","specific","TTU","youthu","mychoice","heterodox", "bimp")
}
if(identical(program_repos_chr,character(0))){
program_repos_chr <- setdiff(natmanager::list_repo(organisation_1L_chr),
c(brochure_repos_chr, exclude_chr, framework_repos_chr, model_repos_chr))
}
if(identical(repositories_chr,character(0))){
if(repository_type_1L_chr == "Framework"){
repositories_chr <- framework_repos_chr
}
if(repository_type_1L_chr == "Module"){
repositories_chr <- model_repos_chr
}
if(repository_type_1L_chr == "Program"){
repositories_chr <- program_repos_chr
}else{
repository_type_1L_chr <- "Package"
}
}
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
repository_type_1L_chr
eleases_xx <- releases_xx  %>%
dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
Date = Date %>% format.Date(format_1L_chr) %>% as.character()) %>%
dplyr::select(Date, dplyr::everything())
repository_type_1L_chr %in% c("Package","Module","Framework")
if(repository_type_1L_chr %in% c("Package","Module","Framework")){
logos_chr <- purrr::map_chr(releases_xx$Package,
~paste0("https://ready4-dev.github.io/", .x, "/logo.png"))
releases_xx$Package <- ""
}
releases_xx <- releases_xx %>%
kableExtra::kable("html",
escape = FALSE) %>% # kableExtra::kbl() %>%
kableExtra::kable_styling(...)   # kableExtra::kable_styling(...) %>%
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
releases_xx <- releases_xx  %>%
dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
Date = Date %>% format.Date(format_1L_chr) %>% as.character()) %>%
dplyr::select(Date, dplyr::everything())
if(repository_type_1L_chr %in% c("Package","Module","Framework")){
logos_chr <- purrr::map_chr(releases_xx$Package,
~paste0("https://ready4-dev.github.io/", .x, "/logo.png"))
releases_xx$Package <- ""
}
rele
releases_xx <- releases_xx %>%
kableExtra::kable("html",
escape = FALSE) %>% # kableExtra::kbl() %>%
kableExtra::kable_styling()
logos_chr
releases_xx$Package
releases_xx
class(releases_xx)
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
Date = Date %>% format.Date(format_1L_chr) %>% as.character()) %>%
dplyr::select(Date, dplyr::everything())
releases_xx  %>%
dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
Date = Date %>% format.Date(format_1L_chr) %>% as.character()) %>%
dplyr::select(Date, dplyr::everything())
repository_type_1L_chr
logos_chr <- purrr::map_chr(releases_xx %>% dplyr::pull(repository_type_1L_chr),
~paste0("https://ready4-dev.github.io/", .x, "/logo.png"))
repositories_chr
repositories_chr = character(0)
if(identical(brochure_repos_chr,character(0))){
brochure_repos_chr <- "ready4web"
}
if(identical(exclude_chr,character(0))){
exclude_chr <- "rebuild"
}
if(identical(framework_repos_chr,character(0))){
framework_repos_chr <- c("ready4","ready4fun","ready4class","ready4pack","ready4use","ready4show")
}
if(identical(model_repos_chr,character(0))){
model_repos_chr <- c("youthvars","scorz","specific","TTU","youthu","mychoice","heterodox", "bimp")
}
if(identical(program_repos_chr,character(0))){
program_repos_chr <- setdiff(natmanager::list_repo(organisation_1L_chr),
c(brochure_repos_chr, exclude_chr, framework_repos_chr, model_repos_chr))
}
if(identical(repositories_chr,character(0))){
if(repository_type_1L_chr == "Framework"){
repositories_chr <- framework_repos_chr
}
if(repository_type_1L_chr == "Module"){
repositories_chr <- model_repos_chr
}
if(repository_type_1L_chr == "Program"){
repositories_chr <- program_repos_chr
}else{
repository_type_1L_chr <- "Package"
}
}
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
releases_xx
releases_xx <- releases_xx  %>%
dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
Date = Date %>% format.Date(format_1L_chr) %>% as.character()) %>%
dplyr::select(Date, dplyr::everything())
if(repository_type_1L_chr %in% c("Package","Module","Framework")){
logos_chr <- purrr::map_chr(releases_xx %>% dplyr::pull(repository_type_1L_chr),
~paste0("https://ready4-dev.github.io/", .x, "/logo.png"))
releases_xx$Package <- ""
}
framework_repos_chr = character(0)
model_repos_chr = character(0)
program_repos_chr = character(0)
repositories_chr = character(0)
brochure_repos_chr = character(0)
repository_type_1L_chr = "Framework"
if(identical(brochure_repos_chr,character(0))){
brochure_repos_chr <- "ready4web"
}
if(identical(exclude_chr,character(0))){
exclude_chr <- "rebuild"
}
if(identical(framework_repos_chr,character(0))){
framework_repos_chr <- c("ready4","ready4fun","ready4class","ready4pack","ready4use","ready4show")
}
if(identical(model_repos_chr,character(0))){
model_repos_chr <- c("youthvars","scorz","specific","TTU","youthu","mychoice","heterodox", "bimp")
}
if(identical(program_repos_chr,character(0))){
program_repos_chr <- setdiff(natmanager::list_repo(organisation_1L_chr),
c(brochure_repos_chr, exclude_chr, framework_repos_chr, model_repos_chr))
}
if(identical(repositories_chr,character(0))){
if(repository_type_1L_chr == "Framework"){
repositories_chr <- framework_repos_chr
}
if(repository_type_1L_chr == "Module"){
repositories_chr <- model_repos_chr
}
if(repository_type_1L_chr == "Program"){
repositories_chr <- program_repos_chr
}else{
repository_type_1L_chr <- "Package"
}
}
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
releases_xx <- releases_xx  %>%
dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
Date = Date %>% format.Date(format_1L_chr) %>% as.character()) %>%
dplyr::select(Date, dplyr::everything())
if(repository_type_1L_chr %in% c("Package","Module","Framework")){
logos_chr <- purrr::map_chr(releases_xx %>% dplyr::pull(repository_type_1L_chr),
~paste0("https://ready4-dev.github.io/", .x, "/logo.png"))
releases_xx$Package <- ""
}
logos_chr
releases_xx
repository_type_1L_chr %in% c("Package","Module","Framework")
blogdown::stop_server()
blogdown::serve_site()
repository_type_1L_chr = "Framework"
brochure_repos_chr = character(0)
exclude_chr = character(0)
format_1L_chr = "%d-%b-%Y"
framework_repos_chr = character(0)
model_repos_chr = character(0)
program_repos_chr = character(0)
organisation_1L_chr = "ready4-dev"
repositories_chr = character(0)
if(identical(brochure_repos_chr,character(0))){
brochure_repos_chr <- "ready4web"
}
if(identical(exclude_chr,character(0))){
exclude_chr <- "rebuild"
}
if(identical(framework_repos_chr,character(0))){
framework_repos_chr <- c("ready4","ready4fun","ready4class","ready4pack","ready4use","ready4show")
}
if(identical(model_repos_chr,character(0))){
model_repos_chr <- c("youthvars","scorz","specific","TTU","youthu","mychoice","heterodox", "bimp")
}
if(identical(program_repos_chr,character(0))){
program_repos_chr <- setdiff(natmanager::list_repo(organisation_1L_chr),
c(brochure_repos_chr, exclude_chr, framework_repos_chr, model_repos_chr))
}
if(identical(repositories_chr,character(0))){
if(repository_type_1L_chr == "Framework"){
repositories_chr <- framework_repos_chr
}
if(repository_type_1L_chr == "Module"){
repositories_chr <- model_repos_chr
}
if(repository_type_1L_chr == "Program"){
repositories_chr <- program_repos_chr
}else{
repository_type_1L_chr <- "Package"
}
}
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
releases_xx-> releases_tb
as_kable_1L_lgl
releases_xx <- releases_xx  %>%
dplyr::mutate(Release = Release %>% stringr::str_remove_all("Release "),
Date = Date %>% format.Date(format_1L_chr) %>% as.character()) %>%
dplyr::select(Date, dplyr::everything())
if(repository_type_1L_chr %in% c("Package","Module","Framework")){
logos_chr <- purrr::map_chr(releases_xx %>% dplyr::pull(repository_type_1L_chr),
~paste0("https://ready4-dev.github.io/", .x, "/logo.png"))
releases_xx <- releases_xx %>%
dplyr::mutate(!!rlang::sym(repository_type_1L_chr) := "")
}
logos_chr
releases_xx <- releases_xx %>%
kableExtra::kable("html", escape = FALSE) %>% # kableExtra::kbl() %>%
kableExtra::kable_styling(bootstrap_options = c("hover",
"condensed"))
repository_type_1L_chr %in% c("Package","Module","Framework")
which(names(releases_xx) %in% c("Package","Module","Framework"))
blogdown::stop_server()
blogdown::serve_site()
print_packages
pkg_extensions_tb
pkg_extensions_tb$Library
make_libraries_tb
releases_xx
releases_tb
releases_tb %>% dplyr::filter(!dplyr::starts_with(Release, "Documentation_"))
releases_tb %>% dplyr::filter(Release != "Documentation_0.0"))
releases_tb %>% dplyr::filter(Release != "Documentation_0.0")
releases_xx <- repositories_chr %>%
purrr::map_dfr(~tidyRSS::tidyfeed(paste0("https://github.com/",organisation_1L_chr,"/",.x,"/releases.atom"))) %>%
dplyr::arrange(dplyr::desc(entry_last_updated)) %>%
dplyr::select(feed_title, entry_title, entry_last_updated, entry_content, entry_link) %>%
dplyr::mutate(feed_title = feed_title %>% stringr::str_remove_all("Release notes from ")) %>%
dplyr::rename(!!rlang::sym(repository_type_1L_chr) := feed_title,
Release = entry_title,
Date = entry_last_updated,
Description = entry_content,
URL = entry_link
)
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
getwd()
libpaths()
.libpaths()
.libPaths()
.libPaths() %>% normalizePath()
getwd() %>% normalizePath()
usethis::edit_r_profile()
?usethis::edit_r_profile
usethis::edit_r_profile("user")
usethis::edit_rstudio_prefs()
usethis::edit_rstudio_snippets()
.libPaths()
blogdown::serve_site()
usethis::edit_r_profile()
usethis::edit_r_profile("project")
